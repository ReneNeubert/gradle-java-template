/*
 * Copyright 2017 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "base"

task cleanRoot(type: Delete) {
    delete "$buildDir"
    followSymlinks = true
    mustRunAfter "clean"
}

task aggregateJavadocs(type: Javadoc) {
    group = "Documentation"
    description = "Generates aggregated Javadocs"
    title = "Softcake ${project.name} ${version} "

    dependsOn {
        publishedModules.javadocJar
    }

    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = rootProject.description
    options.splitIndex = true
    options.addStringOption('Xdoclint:html,syntax,reference', '-quiet')
    options.jFlags '-Xmx1g'
    options.links('http://docs.oracle.com/javase/8/docs/api/',
            'http://typesafehub.github.com/config/latest/api/',
            "http://google.github.io/guava/releases/20.0/api/docs/")

    source publishedModules.sourceSets.main.allJava

    maxMemory = "1024m"
    destinationDir = new File(buildDir, "docs/javadoc")

    doFirst {
        classpath = files(publishedModules.sourceSets.main.compileClasspath)
    }
}

task aggregateSourcesJar(type: Jar) {
    classifier = 'sources'
    def modules = publishedModules.findAll { subproject -> file("$subproject.projectDir").exists() }
    dependsOn modules.sourceJar
    from { modules.sourceSets.main.allSource }
    from("LICENSE.md", "README.md")
    classifier = 'sources'
    extension 'jar'
}

task aggregateJavadocJar(type: Jar) {
    classifier = 'javadoc'
    dependsOn aggregateJavadocs
    from aggregateJavadocs.destinationDir
    classifier 'javadoc'
    extension 'jar'

}

task aggregateJar(type: Jar) {
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (" +
                        "${System.properties['java.vendor']} " +
                        "${System.properties['java.vm.version']})".toString(),
                'Built-By': builtByValue,
                'Build-Date': project.buildDate,
                'Build-Time': project.buildTime,
                'Build-Revision': buildRevision,
                'Built-Gradle': gradle.gradleVersion,
                'Specification-Title': project.name,
                'Specification-Version': normalizeVersion(project.version),
                'Specification-Vendor': 'softcake.org',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'softcake.org')

    }
    extension 'jar'
    dependsOn publishedModules.jar

    from publishedModules.sourceSets.main.output.classesDir
    from publishedModules.sourceSets.main.output.resourcesDir
    from("LICENSE.md", "README.md")

}

artifacts {
    archives aggregateSourcesJar
    archives aggregateJavadocJar
    archives aggregateJar
}

tasks.withType(Jar) {
    group 'Jars'
    from(rootProject.projectDir) {
        include 'LICENSE.md'
        into 'META-INF'
    }
}

task createAllJars(type: Jar) {
    dependsOn aggregateJar, aggregateJavadocJar, aggregateSourcesJar
}

