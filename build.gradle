buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    apply from: "${rootDir}/gradle/dependencies.gradle"
    dependencies {
        classpath gradle_plugins.values()
    }
}

apply plugin: "base"
apply plugin: "de.gliderpilot.semantic-release"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "net.nemerosa.versioning"
apply plugin: "org.sonarqube"
apply plugin: "com.jfrog.artifactory"

ext {

    publishedModules = getPublishedProjects()

    integTestModules = publishedModules.findAll {
        (it.name in ["gradle-java-template-core"])
    }

    benchmarkModules = publishedModules.findAll {
        (it.name in ["gradle-java-template-core"])
    }

    sonarQubeModules = publishedModules
    generateManifest = false
    publishing = true

}

allprojects {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    apply plugin: "ru.vyarus.github-info"

    github {
        user "ReneNeubert"
        license "Apache"
        repository rootProject.name
    }
    group = "${reverseDomain}.${github.repository}"

}


apply from: file('gradle/parameter.gradle')
apply from: file('gradle/idea/idea.gradle')
apply from: file('gradle/credentials.gradle')
apply from: file('gradle/convention.gradle')
apply from: file('gradle/conventionroot.gradle')
apply from: file('gradle/sonarqube.gradle')


subprojects { project ->

    if (project.plugins.hasPlugin(JavaPlugin)) {
        dependencies {
            testCompile test_libraries.junit
            //compile group: 'com.google.guava', name: 'guava', version: '21.0'
        }
    }
}

artifactoryPublish.skip true

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
        releaseAsset aggregateJar, contentType: 'application/zip'
        releaseAsset aggregateSourcesJar, label: 'the sources of the project', contentType:
                'application/zip'
        releaseAsset aggregateJavadocJar, label: 'the javadoc of the project', contentType:
                'application/zip'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:all'
}

task wrapper(type: Wrapper) {
    description = "Generates gradlew and gradlew.bat scripts"
    gradleVersion = '3.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

private List<Project> getPublishedProjects() {
    List<Project> publishedModules = []
    subprojects.each { project ->
        if (project.name.indexOf(rootProject.name) != -1) {
            publishedModules.add(project)
            println("Find published module '$project.name' in root project '$rootProject.name'")
        }
    }
    return publishedModules
}
