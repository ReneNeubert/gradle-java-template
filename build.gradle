/*
 * Copyright 2017 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    apply from: "${rootDir}/gradle/dependencies.gradle"
    dependencies {
        classpath gradle_plugins.values()
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.9.1'

    }
}


apply plugin: "base"
apply plugin: "de.gliderpilot.semantic-release"
apply plugin: "com.github.ben-manes.versions"
apply plugin: "net.nemerosa.versioning"
apply plugin: "org.sonarqube"
apply plugin: "com.jfrog.artifactory"

ext {

    publishedModules = getPublishedProjects()

    integTestModules = publishedModules.findAll {
        (it.name in ["gradle-java-template-core"])
    }

    benchmarkModules = publishedModules.findAll {
        (it.name in ["gradle-java-template-core"])
    }

    sonarQubeModules = publishedModules
    generateManifest = false
    publishing = true

}

allprojects { project ->
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }
    apply plugin: "ru.vyarus.github-info"

    github {
        user "ReneNeubert"
        license "Apache"
        repository rootProject.name
    }

    group = "${reverseDomain}.${github.repository}"


}


apply from: file('gradle/parameter.gradle')
apply from: file('gradle/idea/idea.gradle')
apply from: file('gradle/credentials.gradle')
apply from: file('gradle/convention.gradle')
apply from: file('gradle/compile.gradle')
apply from: file('gradle/sonarqube.gradle')


subprojects { project ->

    if (project.plugins.hasPlugin(JavaPlugin)) {
        dependencies {
            testCompile test_libraries.junit
            //compile group: 'com.google.guava', name: 'guava', version: '21.0'
        }
    }
}


private List<Project> getPublishedProjects() {
    List<Project> publishedModules = []
    subprojects.each { project ->
        if (project.name.indexOf(rootProject.name) != -1) {
            publishedModules.add(project)
            println("Find published module '$project.name' in root project '$rootProject.name'")
        }
    }
    return publishedModules
}

artifactoryPublish.skip true


//apply from: file('gradle/release.gradle')

task aggregateJavadocs(type: Javadoc) {

    title = "Softcake ${project.name} ${version} "
    description = 'Aggregates Javadoc API documentation of all subprojects.'
    group = JavaBasePlugin.DOCUMENTATION_GROUP

    dependsOn publishedModules.javadoc

    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.splitIndex = true
    options.addStringOption('Xdoclint:html,syntax,reference', '-quiet')
    options.jFlags '-Xmx1g'
    options.links('http://docs.oracle.com/javase/8/docs/api/',
            'http://typesafehub.github.com/config/latest/api/',
            "http://google.github.io/guava/releases/21.0/api/docs/")

    source publishedModules.javadoc.source

    destinationDir rootProject.file("$rootProject.buildDir/docs/javadoc")
    classpath = rootProject.files(publishedModules.javadoc.classpath)

}

task aggregateSourcesJar(type: Jar) {
    classifier = 'sources'
    def modules = publishedModules.findAll { subproject -> file("$subproject.projectDir").exists() }
    dependsOn modules.sourceJar
    from { modules.sourceSets.main.allSource }
    extension 'jar'
}

task aggregateJavadocJar(type: Jar) {
    classifier = 'javadoc'
    dependsOn aggregateJavadocs
    from aggregateJavadocs.destinationDir
    classifier 'javadoc'
    extension 'jar'

}

task aggregateJar(type: Jar) {
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (" +
                        "${System.properties['java.vendor']} " +
                        "${System.properties['java.vm.version']})".toString(),
                'Built-By': builtByValue,
                'Build-Date': project.buildDate,
                'Build-Time': project.buildTime,
                'Build-Revision': buildRevision,
                'Built-Gradle': gradle.gradleVersion,
                'Specification-Title': project.name,
                'Specification-Version': normalizeVersion(project.version),
                'Specification-Vendor': 'softcake.org',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'softcake.org')

    }
    extension 'jar'
    dependsOn publishedModules.jar

    from publishedModules.sourceSets.main.output.classesDir
    from publishedModules.sourceSets.main.output.resourcesDir

}

artifacts {
    archives aggregateSourcesJar
    archives aggregateJavadocJar
    archives aggregateJar
}

tasks.withType(Jar) {
    group 'Jars'
    from(rootProject.projectDir) {
        include 'LICENSE.md'
        into 'META-INF'
    }
}

task createAllJars {
    group 'Jars'
    dependsOn aggregateJar, aggregateJavadocJar, aggregateSourcesJar
}

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
        releaseAsset aggregateJar, contentType: 'application/zip'
        releaseAsset aggregateSourcesJar, label: 'the sources of the project', contentType:
                'application/zip'
        releaseAsset aggregateJavadocJar, label: 'the javadoc of the project', contentType:
                'application/zip'
    }
}
